# Caucasian Diplomacy (Byzantine)
on_alliance_removed = { #from alliance_on_actions.txt, separated on_action from effect since behavior is to override, not append
	on_action = {
		on_alliance_removed_caucasian_diplomacy
	}
}

on_alliance_removed_caucasian_diplomacy = {
	effect = {
		# Remove the opinion modifier from having proposed an alliance via the innovation:
		try_remove_caucasian_alliance_opinion_effect = { TARGET = scope:second } 
		scope:second = { try_remove_caucasian_alliance_opinion_effect = { TARGET = root } }
	}
}
# Persianate Literary Influence (Persian)
innovation_persian_court_literature_adopted_pulse = { 
	trigger = {
		culture = {
			has_innovation = innovation_persian_court_literature_world #If a non-Iranian culture adopts Persian literature...
			NOT = { has_variable = sg_adopted_persian_court_literature } 
		}
	}
	
	effect = {	
		if = { #Set up the global variable (should not be used anywhere else)
			limit = { NOT = { has_global_variable = persian_court_literature_adoptors } }
			set_global_variable = {
				name = persian_court_literature_adoptors
				value = 0
			}
		}
		else_if = { 
			limit = { #Limit scaling bonus from the number of unique adopter cultures allowed to 100
				exists = global_var:persian_court_literature_adoptors 
				global_var:persian_court_literature_adoptors < 100 
			} 
			change_global_variable = { name = persian_court_literature_adoptors add = 1 } 
			debug_log = "Persian innovation adoption counter increased by 1"
		}	
		
		culture = {
			set_variable = { name = sg_adopted_persian_court_literature value = true } #prevent a recursion over every character on every pulse
			culture_head = { save_scope_as = culture_head_notification }  #mark culture head as culture representative for display in the notification 	
				
			every_ruler = {
				limit = { 
					culture_group = culture_group:iranian_group #(sanity check)
					culture = { has_innovation = innovation_persian_court_literature_iranian } #... then select all Iranian culture rulers with the innovation...
				}
				
				send_interface_message = {
					title = innovation_persian_court_literature_adopted
					desc = innovation_persian_court_literature_adopted_desc
					type = event_innovation_adopted
					left_icon = scope:culture_head_notification
					add_prestige = persian_court_literature_adoption_prestige #... and give them all a flat amount of prestige based on the number of cultures that have adopted the innovation scaled by their Learning stat. See sg_values.txt for a detailed breakdown.
				}
			}
		}
	}
}

#French Peerage Homage (Frankish + English/Scots)
innovation_peerage_homage = {
	trigger = {
		highest_held_title_tier >= tier_kingdom
		culture = { has_innovation = innovation_french_peerage }
		any_vassal = {
			vassal_contract_has_flag = has_peerage_contract
		}
		is_available_at_peace_adult = yes
	}
	
	effect = {
		random_vassal = {
			limit = { vassal_contract_has_flag = has_peerage_contract }
			save_scope_as = peer_representative #representative for the event
		}
		send_interface_message = {
			title = innovation_peerage_homage
			desc = innovation_peerage_homage_desc
			type = event_peerage_homage
			left_icon = scope:peer_representative
			add_prestige = peerage_prestige_homage
			add_piety = peerage_piety_homage
		}
	}
}
#Seigneurialism Domain Limit Penalty (Frankish + English/Scots)
innovation_seigneurialism_domain_limit_penalty_pulse = {
	trigger = {
		culture = { has_innovation = innovation_seigneurialism }
	}
	
	effect = {
		if = {
			limit = { 
				sg_powerful_rank = yes 
				NOT = { has_character_modifier = sg_consolidated_domain }
			}
			add_character_modifier = sg_consolidated_domain
		}
		else_if = {
			limit = { 
				has_character_modifier = sg_consolidated_domain 
				sg_powerful_rank = no
			} 
			remove_character_modifier = sg_consolidated_domain
		}
	}
}
#Ostsiedlung Culture Flip (Central Germanic)
innovation_east_settling_county_culture_change_pulse = {
	trigger = {
		culture = { has_innovation = innovation_east_settling }
		sg_powerful_rank = yes
	}
	
	effect = {
		save_temporary_scope_as = sponsor
		every_realm_county = {
			limit = { 
				culture = scope:sponsor.culture
				any_title_to_title_neighboring_and_across_water_county = {
					holder = {
						character_is_realm_neighbor = scope:sponsor
					}
					NOT = {
						culture.culture_group = culture_group:central_germanic_group
						has_variable = sg_settlement_eval 
					}
					any_province = {
						has_holding_type = city_holding
					}
				}
			}
			save_temporary_scope_as = source_county
			debug_log = "Ostsiedlung: potential source county [source_county.GetTitle.GetName] identified."
			random_title_to_title_neighboring_and_across_water_county = {
				limit = { 
					NOT = {
						culture.culture_group = culture_group:central_germanic_group
						has_variable = sg_settlement_eval 
					}
					holder = {
						character_is_realm_neighbor = scope:sponsor
					}
					any_province = {
						has_holding_type = city_holding
					}
				}
				save_temporary_scope_as = target_county
				debug_log = "Ostsiedlung: source county [target_county.GetTitle.GetName] evaluating"
				random_list = {
					95 = {
						set_variable = { name = sg_settlement_eval value = true days = 300 }
						debug_log = "Ostsiedlung: no culture change in [target_county.GetTitle.GetName]."
					}
					2 = {
						trigger = { scope:sponsor = { culture = culture:bavarian } }
						set_county_culture = culture:bavarian
						debug_log = "Ostsiedlung: culture change to Bavarian in [target_county.GetTitle.GetName]."
						modifier = {
							add = 3
							any_province = {
								has_building_or_higher = sg_rathaus_01
								debug_log = "Ostsiedlung: Rathaus identified in [target_county.GetTitle.GetName]."
							}
						}
					}
					2 = {
						trigger = { scope:sponsor = { culture = culture:dutch } }
						set_county_culture = culture:dutch
						debug_log = "Ostsiedlung: culture change to Dutch in [target_county.GetTitle.GetName]."
						modifier = {
							add = 3
							any_province = {
								has_building_or_higher = sg_rathaus_01
								debug_log = "Ostsiedlung: Rathaus identified in [target_county.GetTitle.GetName]."
							}
						}
					}
					2 = {
						trigger = { scope:sponsor = { culture = culture:franconian } }
						set_county_culture = culture:franconian
						debug_log = "Ostsiedlung: culture change to Franconian in [target_county.GetTitle.GetName]."
						modifier = {
							add = 3
							any_province = {
								has_building_or_higher = sg_rathaus_01
								debug_log = "Ostsiedlung: Rathaus identified in [target_county.GetTitle.GetName]."
							}
						}
					}
					2 = {
						trigger = { scope:sponsor = { culture = culture:saxon } }
						set_county_culture = culture:saxon
						debug_log = "Ostsiedlung: culture change to Saxon in [target_county.GetTitle.GetName]."
						modifier = {
							add = 3
							any_province = {
								has_building_or_higher = sg_rathaus_01
								debug_log = "Ostsiedlung: Rathaus identified in [target_county.GetTitle.GetName]."
							}
						}
					}
					2 = {
						trigger = { scope:sponsor = { culture = culture:swabian } }
						set_county_culture = culture:swabian
						debug_log = "Ostsiedlung: culture change to Swabian in [target_county.GetTitle.GetName]."
						modifier = {
							add = 3
							any_province = {
								has_building_or_higher = sg_rathaus_01
								debug_log = "Ostsiedlung: Rathaus identified in [target_county.GetTitle.GetName]."
							}
						}
					}
				}
			}
		}
	}
}

quarterly_playable_pulse = {
	on_actions = {
		innovation_persian_court_literature_adopted_pulse
		innovation_seigneurialism_domain_limit_penalty_pulse
	}
}

five_year_playable_pulse = {
	on_actions = {
		innovation_peerage_homage
	}
}

yearly_playable_pulse = {
	on_actions = {
		innovation_east_settling_county_culture_change_pulse
	}
}
